apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: invoice-classifier-training
  annotations:
    # TechEd 2025 — BYOM Blocked Invoice Classification
    scenarios.ai.sap.com/name: "Blocked Invoice Classification (BYOM)"
    scenarios.ai.sap.com/description: "Train a Hugging Face model to classify blocked invoices"
    executables.ai.sap.com/name: "training"
    executables.ai.sap.com/description: "Training pipeline for blocked-invoice classifier"
    # Artifact kinds (names must match inputs/outputs below)
    artifacts.ai.sap.com/invoicesdataset.kind: "dataset"
    artifacts.ai.sap.com/invoiceclassifiermodel.kind: "model"
    artifacts.ai.sap.com/evalmetrics.kind: "metrics"
  labels:
    scenarios.ai.sap.com/id: "blocked-invoice-classifier"
    ai.sap.com/version: "1.0.0"

spec:
  # If your image is private or to avoid Hub rate limits, ensure this secret exists in the RG
  imagePullSecrets:
    - name: docker-registry-secret  # <-- replace with your actual secret name

  entrypoint: training-pipeline

  arguments:
    parameters:
      - name: trainImage
        value: docker.io/itsmarlo/invoice-train:latest
      - name: baseModel
        value: microsoft/deberta-v3-base
      - name: numEpochs
        value: "3"
      - name: learningRate
        value: "2e-5"
      - name: batchSize
        value: "16"
      - name: numLabels
        value: "5"

  templates:
    - name: training-pipeline
      inputs:
        artifacts:
          - name: invoicesdataset
            path: /app/data/
      steps:
        - - name: train-model
            template: model-training
            arguments:
              artifacts:
                - name: invoicesdataset
                  from: "{{inputs.artifacts.invoicesdataset}}"
        - - name: evaluate-model
            template: model-evaluation
            arguments:
              artifacts:
                - name: invoiceclassifiermodel
                  from: "{{steps.train-model.outputs.artifacts.invoiceclassifiermodel}}"

    # Step 1 — Train
    - name: model-training
      metadata:
        labels:
          ai.sap.com/resourcePlan: train.l
      inputs:
        artifacts:
          - name: invoicesdataset
            path: /app/data/
      outputs:
        artifacts:
          - name: invoiceclassifiermodel
            globalName: invoiceclassifiermodel
            path: /app/invoice_classifier/
            archive: { none: {} }
      container:
        image: "{{workflow.parameters.trainImage}}"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh","-lc"]
        args:
          - |
            set -e
            mkdir -p /app/invoice_classifier /app/output/metrics
            export OUTPUT_DIR=/app/invoice_classifier
            export MODEL_NAME="{{workflow.parameters.baseModel}}"
            export NUM_EPOCHS="{{workflow.parameters.numEpochs}}"
            export LEARNING_RATE="{{workflow.parameters.learningRate}}"
            export BATCH_SIZE="{{workflow.parameters.batchSize}}"
            export NUM_LABELS="{{workflow.parameters.numLabels}}"
            python /app/train.py

    # Step 2 — Evaluate (lightweight placeholder; replace with real eval)
    - name: model-evaluation
      metadata:
        labels:
          ai.sap.com/resourcePlan: train.s
      inputs:
        artifacts:
          - name: invoiceclassifiermodel
            path: /app/invoice_classifier/
      outputs:
        artifacts:
          - name: evalmetrics
            globalName: evalmetrics
            path: /app/output/metrics/
            archive: { none: {} }
      container:
        image: "{{workflow.parameters.trainImage}}"
        imagePullPolicy: IfNotPresent
        command: ["python","-c"]
        args:
          - |
            import json, os
            os.makedirs("/app/output/metrics/", exist_ok=True)
            with open("/app/output/metrics/metrics.json","w") as f:
              json.dump({"status":"ok","note":"replace with real evaluation"}, f)

